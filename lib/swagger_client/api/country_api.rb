=begin
#Fax.to REST API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 0.0.1

Generated by: https://github.com/swagger-api/swagger-codegen.git
Swagger Codegen version: 2.2.3

=end

require "uri"

module SwaggerClient
  class CountryApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # 
    # This API get areacodes . 
    # @param country_code countryCode in the Country
    # @param state_id stateId in the Country
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def areacodes_country_code_state_id_get(country_code, state_id, opts = {})
      areacodes_country_code_state_id_get_with_http_info(country_code, state_id, opts)
      return nil
    end

    # 
    # This API get areacodes . 
    # @param country_code countryCode in the Country
    # @param state_id stateId in the Country
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def areacodes_country_code_state_id_get_with_http_info(country_code, state_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CountryApi.areacodes_country_code_state_id_get ..."
      end
      # verify the required parameter 'country_code' is set
      if @api_client.config.client_side_validation && country_code.nil?
        fail ArgumentError, "Missing the required parameter 'country_code' when calling CountryApi.areacodes_country_code_state_id_get"
      end
      # verify the required parameter 'state_id' is set
      if @api_client.config.client_side_validation && state_id.nil?
        fail ArgumentError, "Missing the required parameter 'state_id' when calling CountryApi.areacodes_country_code_state_id_get"
      end
      # resource path
      local_var_path = "/areacodes/{countryCode}/{stateId}".sub('{' + 'countryCode' + '}', country_code.to_s).sub('{' + 'stateId' + '}', state_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CountryApi#areacodes_country_code_state_id_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # This API didgroups countryCode. 
    # @param country_code countryCode in the Country
    # @param did_group_ids didGroupId in the Country
    # @param state_id stateId in the Country
    # @param city_name_pattern cityNamePattern in the Country
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def countries_country_code_didgroups_get(country_code, did_group_ids, state_id, city_name_pattern, opts = {})
      countries_country_code_didgroups_get_with_http_info(country_code, did_group_ids, state_id, city_name_pattern, opts)
      return nil
    end

    # 
    # This API didgroups countryCode. 
    # @param country_code countryCode in the Country
    # @param did_group_ids didGroupId in the Country
    # @param state_id stateId in the Country
    # @param city_name_pattern cityNamePattern in the Country
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def countries_country_code_didgroups_get_with_http_info(country_code, did_group_ids, state_id, city_name_pattern, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CountryApi.countries_country_code_didgroups_get ..."
      end
      # verify the required parameter 'country_code' is set
      if @api_client.config.client_side_validation && country_code.nil?
        fail ArgumentError, "Missing the required parameter 'country_code' when calling CountryApi.countries_country_code_didgroups_get"
      end
      # verify the required parameter 'did_group_ids' is set
      if @api_client.config.client_side_validation && did_group_ids.nil?
        fail ArgumentError, "Missing the required parameter 'did_group_ids' when calling CountryApi.countries_country_code_didgroups_get"
      end
      # verify the required parameter 'state_id' is set
      if @api_client.config.client_side_validation && state_id.nil?
        fail ArgumentError, "Missing the required parameter 'state_id' when calling CountryApi.countries_country_code_didgroups_get"
      end
      # verify the required parameter 'city_name_pattern' is set
      if @api_client.config.client_side_validation && city_name_pattern.nil?
        fail ArgumentError, "Missing the required parameter 'city_name_pattern' when calling CountryApi.countries_country_code_didgroups_get"
      end
      # resource path
      local_var_path = "/countries/{countryCode}/didgroups".sub('{' + 'countryCode' + '}', country_code.to_s)

      # query parameters
      query_params = {}
      query_params[:'didGroupIds'] = did_group_ids
      query_params[:'stateId'] = state_id
      query_params[:'cityNamePattern'] = city_name_pattern

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CountryApi#countries_country_code_didgroups_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # This API didgroups provision. 
    # @param did_group_id didGroupId in the Country
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def countries_didgroups_did_group_id_provision_post(did_group_id, opts = {})
      countries_didgroups_did_group_id_provision_post_with_http_info(did_group_id, opts)
      return nil
    end

    # 
    # This API didgroups provision. 
    # @param did_group_id didGroupId in the Country
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def countries_didgroups_did_group_id_provision_post_with_http_info(did_group_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CountryApi.countries_didgroups_did_group_id_provision_post ..."
      end
      # verify the required parameter 'did_group_id' is set
      if @api_client.config.client_side_validation && did_group_id.nil?
        fail ArgumentError, "Missing the required parameter 'did_group_id' when calling CountryApi.countries_didgroups_did_group_id_provision_post"
      end
      # resource path
      local_var_path = "/countries/didgroups/{didGroupId}/provision".sub('{' + 'didGroupId' + '}', did_group_id.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CountryApi#countries_didgroups_did_group_id_provision_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # This API get countries. 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def countries_get(opts = {})
      countries_get_with_http_info(opts)
      return nil
    end

    # 
    # This API get countries. 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def countries_get_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CountryApi.countries_get ..."
      end
      # resource path
      local_var_path = "/countries"

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CountryApi#countries_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # This API get States . 
    # @param country_code countryCode in the Country
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def states_country_code_get(country_code, opts = {})
      states_country_code_get_with_http_info(country_code, opts)
      return nil
    end

    # 
    # This API get States . 
    # @param country_code countryCode in the Country
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def states_country_code_get_with_http_info(country_code, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: CountryApi.states_country_code_get ..."
      end
      # verify the required parameter 'country_code' is set
      if @api_client.config.client_side_validation && country_code.nil?
        fail ArgumentError, "Missing the required parameter 'country_code' when calling CountryApi.states_country_code_get"
      end
      # resource path
      local_var_path = "/states/{countryCode}".sub('{' + 'countryCode' + '}', country_code.to_s)

      # query parameters
      query_params = {}

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: CountryApi#states_country_code_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
