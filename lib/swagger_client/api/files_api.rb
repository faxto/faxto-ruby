=begin
#Fax.to REST API

#No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

OpenAPI spec version: 0.0.1

Generated by: https://github.com/swagger-api/swagger-codegen.git

=end

require "uri"

module SwaggerClient
  class FilesApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end

    # 
    # This API lists all the files 
    # @param api_key API Key
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def files_get(api_key, opts = {})
      files_get_with_http_info(api_key, opts)
      return nil
    end

    # 
    # This API lists all the files 
    # @param api_key API Key
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def files_get_with_http_info(api_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: FilesApi.files_get ..."
      end
      # verify the required parameter 'api_key' is set
      fail ArgumentError, "Missing the required parameter 'api_key' when calling FilesApi.files_get" if api_key.nil?
      # resource path
      local_var_path = "/files".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'api_key'] = api_key

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:GET, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FilesApi#files_get\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # This API deletes a single file. 
    # @param api_key API Key
    # @param id id of the file / document
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def files_id_delete(api_key, id, opts = {})
      files_id_delete_with_http_info(api_key, id, opts)
      return nil
    end

    # 
    # This API deletes a single file. 
    # @param api_key API Key
    # @param id id of the file / document
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Fixnum, Hash)>] nil, response status code and response headers
    def files_id_delete_with_http_info(api_key, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: FilesApi.files_id_delete ..."
      end
      # verify the required parameter 'api_key' is set
      fail ArgumentError, "Missing the required parameter 'api_key' when calling FilesApi.files_id_delete" if api_key.nil?
      # verify the required parameter 'id' is set
      fail ArgumentError, "Missing the required parameter 'id' when calling FilesApi.files_id_delete" if id.nil?
      # resource path
      local_var_path = "/files/{id}".sub('{format}','json').sub('{' + 'id' + '}', id.to_s)

      # query parameters
      query_params = {}
      query_params[:'api_key'] = api_key

      # header parameters
      header_params = {}

      # form parameters
      form_params = {}

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FilesApi#files_id_delete\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # 
    # This API allows uploading of a single file. 
    # @param api_key API Key
    # @param file PDF file to upload
    # @param [Hash] opts the optional parameters
    # @return [File]
    def files_post(api_key, file, opts = {})
      data, _status_code, _headers = files_post_with_http_info(api_key, file, opts)
      return data
    end

    # 
    # This API allows uploading of a single file. 
    # @param api_key API Key
    # @param file PDF file to upload
    # @param [Hash] opts the optional parameters
    # @return [Array<(File, Fixnum, Hash)>] File data, response status code and response headers
    def files_post_with_http_info(api_key, file, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug "Calling API: FilesApi.files_post ..."
      end
      # verify the required parameter 'api_key' is set
      fail ArgumentError, "Missing the required parameter 'api_key' when calling FilesApi.files_post" if api_key.nil?
      # verify the required parameter 'file' is set
      fail ArgumentError, "Missing the required parameter 'file' when calling FilesApi.files_post" if file.nil?
      # resource path
      local_var_path = "/files".sub('{format}','json')

      # query parameters
      query_params = {}
      query_params[:'api_key'] = api_key

      # header parameters
      header_params = {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['multipart/form-data'])

      # form parameters
      form_params = {}
      form_params["file"] = file

      # http body (model)
      post_body = nil
      auth_names = []
      data, status_code, headers = @api_client.call_api(:POST, local_var_path,
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => 'File')
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: FilesApi#files_post\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
